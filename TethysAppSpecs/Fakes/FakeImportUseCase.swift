import Tethys
import TethysKit
import CBGPromise
import Result

// this file was generated by Xcode-Better-Refactor-Tools
// https://github.com/tjarratt/xcode-better-refactor-tools

class FakeImportUseCase : ImportUseCase {
    init() {}

    private(set) var scanForImportableCallCount : Int = 0
    private var scanForImportableArgs : Array<(URL)> = []
    func scanForImportableArgsForCall(callIndex: Int) -> (URL) {
        return self.scanForImportableArgs[callIndex]
    }
    var scanForImportablePromises: [Promise<ImportUseCaseItem>] = []
    func scanForImportable(_ url: URL) -> Future<ImportUseCaseItem> {
        self.scanForImportableCallCount += 1
        self.scanForImportableArgs.append((url))
        let promise = Promise<ImportUseCaseItem>()
        self.scanForImportablePromises.append(promise)
        return promise.future
    }

    private(set) var importItemCallCount : Int = 0
    private var importItemArgs : Array<(URL)> = []
    func importItemArgsForCall(callIndex: Int) -> (URL) {
        return self.importItemArgs[callIndex]
    }
    var importItemPromises: [Promise<Result<Void, TethysError>>] = []
    func importItem(_ url: URL) -> Future<Result<Void, TethysError>> {
        self.importItemCallCount += 1
        self.importItemArgs.append((url))
        let promise = Promise<Result<Void, TethysError>>()
        self.importItemPromises.append(promise)
        return promise.future
    }
}
