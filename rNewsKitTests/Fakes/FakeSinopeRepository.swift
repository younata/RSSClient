import Foundation
import CBGPromise
import Result
import Sinope

// this file was generated by Xcode-Better-Refactor-Tools
// https://github.com/tjarratt/xcode-better-refactor-tools

final class FakeSinopeRepository : Sinope.Repository, Equatable {
    init() {
    }

    var _authToken : String?


    var authToken : String? {
        get {
            return _authToken!
        }
    }

    private(set) var createAccountCallCount : Int = 0
    var createAccountStub : ((String, String) -> (Future<Result<Void, SinopeError>>))?
    private var createAccountArgs : Array<(String, String)> = []
    func createAccountReturns(stubbedValues: (Future<Result<Void, SinopeError>>)) {
        self.createAccountStub = {(email: String, password: String) -> (Future<Result<Void, SinopeError>>) in
            return stubbedValues
        }
    }
    func createAccountArgsForCall(callIndex: Int) -> (String, String) {
        return self.createAccountArgs[callIndex]
    }
    func createAccount(email: String, password: String) -> (Future<Result<Void, SinopeError>>) {
        self.createAccountCallCount += 1
        self.createAccountArgs.append((email, password))
        return self.createAccountStub!(email, password)
    }

    private(set) var loginCallCount : Int = 0
    var loginStub : ((String, String) -> (Future<Result<Void, SinopeError>>))?
    private var loginArgs : Array<(String, String)> = []
    func loginReturns(stubbedValues: (Future<Result<Void, SinopeError>>)) {
        self.loginStub = {(email: String, password: String) -> (Future<Result<Void, SinopeError>>) in
            return stubbedValues
        }
    }
    func loginArgsForCall(callIndex: Int) -> (String, String) {
        return self.loginArgs[callIndex]
    }
    func login(email: String, password: String) -> (Future<Result<Void, SinopeError>>) {
        self.loginCallCount += 1
        self.loginArgs.append((email, password))
        return self.loginStub!(email, password)
    }

    private(set) var loginAuthTokenCallCount : Int = 0
    private var loginAuthTokenArgs : Array<(String)> = []
    func loginAuthTokenArgsForCall(callIndex: Int) -> (String) {
        return self.loginAuthTokenArgs[callIndex]
    }
    func login(authToken: String) {
        self.loginAuthTokenCallCount += 1
        self._authToken = authToken
        self.loginAuthTokenArgs.append((authToken))
    }

    private(set) var addDeviceTokenCallCount : Int = 0
    var addDeviceTokenStub : ((String) -> (Future<Result<Void, SinopeError>>))?
    private var addDeviceTokenArgs : Array<(String)> = []
    func addDeviceTokenReturns(stubbedValues: (Future<Result<Void, SinopeError>>)) {
        self.addDeviceTokenStub = {(token: String) -> (Future<Result<Void, SinopeError>>) in
            return stubbedValues
        }
    }
    func addDeviceTokenArgsForCall(callIndex: Int) -> (String) {
        return self.addDeviceTokenArgs[callIndex]
    }
    func addDeviceToken(token: String) -> (Future<Result<Void, SinopeError>>) {
        self.addDeviceTokenCallCount += 1
        self.addDeviceTokenArgs.append((token))
        return self.addDeviceTokenStub!(token)
    }

    private(set) var deleteAccountCallCount : Int = 0
    var deleteAccountStub : (() -> (Future<Result<Void, SinopeError>>))?
    func deleteAccountReturns(stubbedValues: (Future<Result<Void, SinopeError>>)) {
        self.deleteAccountStub = {() -> (Future<Result<Void, SinopeError>>) in
            return stubbedValues
        }
    }
    func deleteAccount() -> (Future<Result<Void, SinopeError>>) {
        self.deleteAccountCallCount += 1
        return self.deleteAccountStub!()
    }

    private(set) var subscribeCallCount : Int = 0
    var subscribeStub : (([NSURL]) -> (Future<Result<[NSURL], SinopeError>>))?
    private var subscribeArgs : Array<([NSURL])> = []
    func subscribeReturns(stubbedValues: (Future<Result<[NSURL], SinopeError>>)) {
        self.subscribeStub = {(feeds: [NSURL]) -> (Future<Result<[NSURL], SinopeError>>) in
            return stubbedValues
        }
    }
    func subscribeArgsForCall(callIndex: Int) -> ([NSURL]) {
        return self.subscribeArgs[callIndex]
    }
    func subscribe(feeds: [NSURL]) -> (Future<Result<[NSURL], SinopeError>>) {
        self.subscribeCallCount += 1
        self.subscribeArgs.append((feeds))
        return self.subscribeStub!(feeds)
    }

    private(set) var unsubscribeCallCount : Int = 0
    var unsubscribeStub : (([NSURL]) -> (Future<Result<[NSURL], SinopeError>>))?
    private var unsubscribeArgs : Array<([NSURL])> = []
    func unsubscribeReturns(stubbedValues: (Future<Result<[NSURL], SinopeError>>)) {
        self.unsubscribeStub = {(feeds: [NSURL]) -> (Future<Result<[NSURL], SinopeError>>) in
            return stubbedValues
        }
    }
    func unsubscribeArgsForCall(callIndex: Int) -> ([NSURL]) {
        return self.unsubscribeArgs[callIndex]
    }
    func unsubscribe(feeds: [NSURL]) -> (Future<Result<[NSURL], SinopeError>>) {
        self.unsubscribeCallCount += 1
        self.unsubscribeArgs.append((feeds))
        return self.unsubscribeStub!(feeds)
    }

    private(set) var fetchCallCount : Int = 0
    var fetchStub : ((NSDate?) -> (Future<Result<(NSDate, [Feed]), SinopeError>>))?
    private var fetchArgs : Array<(NSDate?)> = []
    func fetchReturns(stubbedValues: (Future<Result<(NSDate, [Feed]), SinopeError>>)) {
        self.fetchStub = {(date: NSDate?) -> (Future<Result<(NSDate, [Feed]), SinopeError>>) in
            return stubbedValues
        }
    }
    func fetchArgsForCall(callIndex: Int) -> (NSDate?) {
        return self.fetchArgs[callIndex]
    }
    func fetch(date: NSDate?) -> (Future<Result<(NSDate, [Feed]), SinopeError>>) {
        self.fetchCallCount += 1
        self.fetchArgs.append((date))
        return self.fetchStub!(date)
    }

    static func reset() {
    }
}

func == (a: FakeSinopeRepository, b: FakeSinopeRepository) -> Bool {
    return a === b
}