@testable import rNewsKit
import CBGPromise
import Result

// this file was generated by Xcode-Better-Refactor-Tools
// https://github.com/tjarratt/xcode-better-refactor-tools

class FakeUpdateUseCase : UpdateUseCase, Equatable {
    init() {
    }

    private(set) var updateFeedsCallCount : Int = 0
    var updateFeedsStub : (([Feed], [DataSubscriber]) -> (Future<Result<Void, RNewsError>>))?
    private var updateFeedsArgs : Array<([Feed], [DataSubscriber])> = []
    func updateFeedsReturns(stubbedValues: (Future<Result<Void, RNewsError>>)) {
        self.updateFeedsStub = {(feeds: [Feed], subscribers: [DataSubscriber]) -> (Future<Result<Void, RNewsError>>) in
            return stubbedValues
        }
    }
    func updateFeedsArgsForCall(callIndex: Int) -> ([Feed], [DataSubscriber]) {
        return self.updateFeedsArgs[callIndex]
    }
    func updateFeeds(feeds: [Feed], subscribers: [DataSubscriber]) -> (Future<Result<Void, RNewsError>>) {
        self.updateFeedsCallCount += 1
        self.updateFeedsArgs.append((feeds, subscribers))
        return self.updateFeedsStub!(feeds, subscribers)
    }

    static func reset() {
    }
}

func == (a: FakeUpdateUseCase, b: FakeUpdateUseCase) -> Bool {
    return a === b
}