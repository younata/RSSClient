@testable import rNewsKit
import CBGPromise

// this file was generated by Xcode-Better-Refactor-Tools
// https://github.com/tjarratt/xcode-better-refactor-tools

class FakeDataService : DataService, Equatable {
    init() {
        self.set_searchIndexArgs = []
        self.set_mainQueueArgs = []
    }

    private var _searchIndex : SearchIndex??
    private var set_searchIndexArgs : Array<SearchIndex?>
    private var _mainQueue : NSOperationQueue?
    private var set_mainQueueArgs : Array<NSOperationQueue>


    var searchIndex : SearchIndex? {
        get {
            return _searchIndex!
        }

        set {
            _searchIndex = newValue
            set_searchIndexArgs.append(newValue)
        }
    }

    var mainQueue : NSOperationQueue {
        get {
            return _mainQueue!
        }

        set {
            _mainQueue = newValue
            set_mainQueueArgs.append(newValue)
        }
    }

    func setSearchIndexCallCount() -> Int {
        return set_searchIndexArgs.count
    }

    func setSearchIndexArgsForCall(index : Int) throws -> SearchIndex? {
        if index < 0 || index >= set_searchIndexArgs.count {
            throw NSError.init(domain: "swift-generate-fake-domain", code: 1, userInfo: nil)
        }
        return set_searchIndexArgs[index]
    }

    func setMainQueueCallCount() -> Int {
        return set_mainQueueArgs.count
    }

    func setMainQueueArgsForCall(index : Int) throws -> NSOperationQueue {
        if index < 0 || index >= set_mainQueueArgs.count {
            throw NSError.init(domain: "swift-generate-fake-domain", code: 1, userInfo: nil)
        }
        return set_mainQueueArgs[index]
    }

    private(set) var createFeedCallCount : Int = 0
    var createFeedStub : ((Feed -> Void) -> (Void))?
    private var createFeedArgs : Array<(Feed -> Void)> = []
    func createFeedReturns(stubbedValues: (Void)) {
        self.createFeedStub = {(callback: Feed -> Void) -> (Void) in
            return stubbedValues
        }
    }
    func createFeedArgsForCall(callIndex: Int) -> (Feed -> Void) {
        return self.createFeedArgs[callIndex]
    }
    func createFeed(callback: Feed -> Void) -> (Void) {
        self.createFeedCallCount += 1
        self.createFeedArgs.append((callback))
        return self.createFeedStub!(callback)
    }

    private(set) var createArticleCallCount : Int = 0
    var createArticleStub : ((Feed?, Article -> Void) -> (Void))?
    private var createArticleArgs : Array<(Feed?, Article -> Void)> = []
    func createArticleReturns(stubbedValues: (Void)) {
        self.createArticleStub = {(feed: Feed?, callback: Article -> Void) -> (Void) in
            return stubbedValues
        }
    }
    func createArticleArgsForCall(callIndex: Int) -> (Feed?, Article -> Void) {
        return self.createArticleArgs[callIndex]
    }
    func createArticle(feed: Feed?, callback: Article -> Void) -> (Void) {
        self.createArticleCallCount += 1
        self.createArticleArgs.append((feed, callback))
        return self.createArticleStub!(feed, callback)
    }

    private(set) var createEnclosureCallCount : Int = 0
    var createEnclosureStub : ((Article?, Enclosure -> Void) -> (Void))?
    private var createEnclosureArgs : Array<(Article?, Enclosure -> Void)> = []
    func createEnclosureReturns(stubbedValues: (Void)) {
        self.createEnclosureStub = {(article: Article?, callback: Enclosure -> Void) -> (Void) in
            return stubbedValues
        }
    }
    func createEnclosureArgsForCall(callIndex: Int) -> (Article?, Enclosure -> Void) {
        return self.createEnclosureArgs[callIndex]
    }
    func createEnclosure(article: Article?, callback: Enclosure -> Void) -> (Void) {
        self.createEnclosureCallCount += 1
        self.createEnclosureArgs.append((article, callback))
        return self.createEnclosureStub!(article, callback)
    }

    private(set) var feedsMatchingPredicateCallCount : Int = 0
    var feedsMatchingPredicateStub : ((NSPredicate) -> (Future<DataStoreBackedArray<Feed>>))?
    private var feedsMatchingPredicateArgs : Array<(NSPredicate)> = []
    func feedsMatchingPredicateReturns(stubbedValues: (Future<DataStoreBackedArray<Feed>>)) {
        self.feedsMatchingPredicateStub = {(predicate: NSPredicate) -> (Future<DataStoreBackedArray<Feed>>) in
            return stubbedValues
        }
    }
    func feedsMatchingPredicateArgsForCall(callIndex: Int) -> (NSPredicate) {
        return self.feedsMatchingPredicateArgs[callIndex]
    }
    func feedsMatchingPredicate(predicate: NSPredicate) -> (Future<DataStoreBackedArray<Feed>>) {
        self.feedsMatchingPredicateCallCount += 1
        self.feedsMatchingPredicateArgs.append((predicate))
        return self.feedsMatchingPredicateStub!(predicate)
    }

    private(set) var articlesMatchingPredicateCallCount : Int = 0
    var articlesMatchingPredicateStub : ((NSPredicate) -> (Future<DataStoreBackedArray<Article>>))?
    private var articlesMatchingPredicateArgs : Array<(NSPredicate)> = []
    func articlesMatchingPredicateReturns(stubbedValues: (Future<DataStoreBackedArray<Article>>)) {
        self.articlesMatchingPredicateStub = {(predicate: NSPredicate) -> (Future<DataStoreBackedArray<Article>>) in
            return stubbedValues
        }
    }
    func articlesMatchingPredicateArgsForCall(callIndex: Int) -> (NSPredicate) {
        return self.articlesMatchingPredicateArgs[callIndex]
    }
    func articlesMatchingPredicate(predicate: NSPredicate) -> (Future<DataStoreBackedArray<Article>>) {
        self.articlesMatchingPredicateCallCount += 1
        self.articlesMatchingPredicateArgs.append((predicate))
        return self.articlesMatchingPredicateStub!(predicate)
    }

    private(set) var enclosuresMatchingPredicateCallCount : Int = 0
    var enclosuresMatchingPredicateStub : ((NSPredicate) -> (Future<DataStoreBackedArray<Enclosure>>))?
    private var enclosuresMatchingPredicateArgs : Array<(NSPredicate)> = []
    func enclosuresMatchingPredicateReturns(stubbedValues: (Future<DataStoreBackedArray<Enclosure>>)) {
        self.enclosuresMatchingPredicateStub = {(predicate: NSPredicate) -> (Future<DataStoreBackedArray<Enclosure>>) in
            return stubbedValues
        }
    }
    func enclosuresMatchingPredicateArgsForCall(callIndex: Int) -> (NSPredicate) {
        return self.enclosuresMatchingPredicateArgs[callIndex]
    }
    func enclosuresMatchingPredicate(predicate: NSPredicate) -> (Future<DataStoreBackedArray<Enclosure>>) {
        self.enclosuresMatchingPredicateCallCount += 1
        self.enclosuresMatchingPredicateArgs.append((predicate))
        return self.enclosuresMatchingPredicateStub!(predicate)
    }

    private(set) var saveFeedCallCount : Int = 0
    var saveFeedStub : ((Feed) -> (Future<Void>))?
    private var saveFeedArgs : Array<(Feed)> = []
    func saveFeedReturns(stubbedValues: (Future<Void>)) {
        self.saveFeedStub = {(feed: Feed) -> (Future<Void>) in
            return stubbedValues
        }
    }
    func saveFeedArgsForCall(callIndex: Int) -> (Feed) {
        return self.saveFeedArgs[callIndex]
    }
    func saveFeed(feed: Feed) -> (Future<Void>) {
        self.saveFeedCallCount += 1
        self.saveFeedArgs.append((feed))
        return self.saveFeedStub!(feed)
    }

    private(set) var saveArticleCallCount : Int = 0
    var saveArticleStub : ((Article) -> (Future<Void>))?
    private var saveArticleArgs : Array<(Article)> = []
    func saveArticleReturns(stubbedValues: (Future<Void>)) {
        self.saveArticleStub = {(article: Article) -> (Future<Void>) in
            return stubbedValues
        }
    }
    func saveArticleArgsForCall(callIndex: Int) -> (Article) {
        return self.saveArticleArgs[callIndex]
    }
    func saveArticle(article: Article) -> (Future<Void>) {
        self.saveArticleCallCount += 1
        self.saveArticleArgs.append((article))
        return self.saveArticleStub!(article)
    }

    private(set) var saveEnclosureCallCount : Int = 0
    var saveEnclosureStub : ((Enclosure) -> (Future<Void>))?
    private var saveEnclosureArgs : Array<(Enclosure)> = []
    func saveEnclosureReturns(stubbedValues: (Future<Void>)) {
        self.saveEnclosureStub = {(enclosure: Enclosure) -> (Future<Void>) in
            return stubbedValues
        }
    }
    func saveEnclosureArgsForCall(callIndex: Int) -> (Enclosure) {
        return self.saveEnclosureArgs[callIndex]
    }
    func saveEnclosure(enclosure: Enclosure) -> (Future<Void>) {
        self.saveEnclosureCallCount += 1
        self.saveEnclosureArgs.append((enclosure))
        return self.saveEnclosureStub!(enclosure)
    }

    private(set) var deleteFeedCallCount : Int = 0
    var deleteFeedStub : ((Feed) -> (Future<Void>))?
    private var deleteFeedArgs : Array<(Feed)> = []
    func deleteFeedReturns(stubbedValues: (Future<Void>)) {
        self.deleteFeedStub = {(feed: Feed) -> (Future<Void>) in
            return stubbedValues
        }
    }
    func deleteFeedArgsForCall(callIndex: Int) -> (Feed) {
        return self.deleteFeedArgs[callIndex]
    }
    func deleteFeed(feed: Feed) -> (Future<Void>) {
        self.deleteFeedCallCount += 1
        self.deleteFeedArgs.append((feed))
        return self.deleteFeedStub!(feed)
    }

    private(set) var deleteArticleCallCount : Int = 0
    var deleteArticleStub : ((Article) -> (Future<Void>))?
    private var deleteArticleArgs : Array<(Article)> = []
    func deleteArticleReturns(stubbedValues: (Future<Void>)) {
        self.deleteArticleStub = {(article: Article) -> (Future<Void>) in
            return stubbedValues
        }
    }
    func deleteArticleArgsForCall(callIndex: Int) -> (Article) {
        return self.deleteArticleArgs[callIndex]
    }
    func deleteArticle(article: Article) -> (Future<Void>) {
        self.deleteArticleCallCount += 1
        self.deleteArticleArgs.append((article))
        return self.deleteArticleStub!(article)
    }

    private(set) var deleteEnclosureCallCount : Int = 0
    var deleteEnclosureStub : ((Enclosure) -> (Future<Void>))?
    private var deleteEnclosureArgs : Array<(Enclosure)> = []
    func deleteEnclosureReturns(stubbedValues: (Future<Void>)) {
        self.deleteEnclosureStub = {(enclosure: Enclosure) -> (Future<Void>) in
            return stubbedValues
        }
    }
    func deleteEnclosureArgsForCall(callIndex: Int) -> (Enclosure) {
        return self.deleteEnclosureArgs[callIndex]
    }
    func deleteEnclosure(enclosure: Enclosure) -> (Future<Void>) {
        self.deleteEnclosureCallCount += 1
        self.deleteEnclosureArgs.append((enclosure))
        return self.deleteEnclosureStub!(enclosure)
    }

    private(set) var batchCreateCallCount : Int = 0
    var batchCreateStub : ((Int, Int, Int) -> Future<([Feed], [Article], [Enclosure])>)?
    private var batchCreateArgs : Array<(Int, Int, Int)> = []
    func batchCreateReturns(stubbedValues: Future<([Feed], [Article], [Enclosure])>) {
        self.batchCreateStub = {(feedCount: Int, articleCount: Int, enclosureCount: Int) -> Future<([Feed], [Article], [Enclosure])> in
            return stubbedValues
        }
    }
    func batchCreateArgsForCall(callIndex: Int) -> (Int, Int, Int) {
        return self.batchCreateArgs[callIndex]
    }
    func batchCreate(feedCount: Int, articleCount: Int, enclosureCount: Int) -> Future<([Feed], [Article], [Enclosure])> {
        self.batchCreateCallCount += 1
        self.batchCreateArgs.append((feedCount, articleCount, enclosureCount))
        return self.batchCreateStub!(feedCount, articleCount, enclosureCount)
    }

    private(set) var batchSaveCallCount : Int = 0
    var batchSaveStub : (([Feed], [Article], [Enclosure]) -> (Future<Void>))?
    private var batchSaveArgs : Array<([Feed], [Article], [Enclosure])> = []
    func batchSaveReturns(stubbedValues: (Future<Void>)) {
        self.batchSaveStub = {(feeds: [Feed], articles: [Article], enclosures: [Enclosure]) -> (Future<Void>) in
            return stubbedValues
        }
    }
    func batchSaveArgsForCall(callIndex: Int) -> ([Feed], [Article], [Enclosure]) {
        return self.batchSaveArgs[callIndex]
    }
    func batchSave(feeds: [Feed], articles: [Article], enclosures: [Enclosure]) -> (Future<Void>) {
        self.batchSaveCallCount += 1
        self.batchSaveArgs.append((feeds, articles, enclosures))
        return self.batchSaveStub!(feeds, articles, enclosures)
    }

    private(set) var batchDeleteCallCount : Int = 0
    var batchDeleteStub : (([Feed], [Article], [Enclosure]) -> (Future<Void>))?
    private var batchDeleteArgs : Array<([Feed], [Article], [Enclosure])> = []
    func batchDeleteReturns(stubbedValues: (Future<Void>)) {
        self.batchDeleteStub = {(feeds: [Feed], articles: [Article], enclosures: [Enclosure]) -> (Future<Void>) in
            return stubbedValues
        }
    }
    func batchDeleteArgsForCall(callIndex: Int) -> ([Feed], [Article], [Enclosure]) {
        return self.batchDeleteArgs[callIndex]
    }
    func batchDelete(feeds: [Feed], articles: [Article], enclosures: [Enclosure]) -> (Future<Void>) {
        self.batchDeleteCallCount += 1
        self.batchDeleteArgs.append((feeds, articles, enclosures))
        return self.batchDeleteStub!(feeds, articles, enclosures)
    }

    private(set) var deleteEverythingCallCount : Int = 0
    var deleteEverythingStub : (() -> (Future<Void>))?
    func deleteEverythingReturns(stubbedValues: (Future<Void>)) {
        self.deleteEverythingStub = {() -> (Future<Void>) in
            return stubbedValues
        }
    }
    func deleteEverything() -> (Future<Void>) {
        self.deleteEverythingCallCount += 1
        return self.deleteEverythingStub!()
    }

    static func reset() {
    }
}

func == (a: FakeDataService, b: FakeDataService) -> Bool {
    return a === b
}