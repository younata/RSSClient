import WorkFlow
import rNewsKit

// this file was generated by Xcode-Better-Refactor-Tools
// https://github.com/tjarratt/xcode-better-refactor-tools

class FakeMigrationUseCase : MigrationUseCase {
    init() {
    }

    private(set) var addSubscriberCallCount : Int = 0
    private var addSubscriberArgs : Array<(MigrationUseCaseSubscriber)> = []
    func addSubscriberArgsForCall(_ callIndex: Int) -> (MigrationUseCaseSubscriber) {
        return self.addSubscriberArgs[callIndex]
    }
    func addSubscriber(_ subscriber: MigrationUseCaseSubscriber) {
        self.addSubscriberCallCount += 1
        self.addSubscriberArgs.append((subscriber))
    }

    private(set) var beginMigrationCallCount : Int = 0
    func beginMigration() {
        self.beginMigrationCallCount += 1
    }

    private(set) var beginWorkCallCount : Int = 0
    private var beginWorkArgs : Array<(WorkFlowFinishCallback)> = []
    func beginWorkArgsForCall(_ callIndex: Int) -> (WorkFlowFinishCallback) {
        return self.beginWorkArgs[callIndex]
    }
    func beginWork(_ finish: @escaping WorkFlowFinishCallback) {
        self.beginWorkCallCount += 1
        self.beginWorkArgs.append((finish))
    }

    static func reset() {
    }
}

class FakeMigrationUseCaseSubscriber : MigrationUseCaseSubscriber {
    init() {
    }

    private(set) var migrationUseCaseDidFinishCallCount : Int = 0
    private var migrationUseCaseDidFinishArgs : Array<(MigrationUseCase)> = []
    func migrationUseCaseDidFinishArgsForCall(_ callIndex: Int) -> (MigrationUseCase) {
        return self.migrationUseCaseDidFinishArgs[callIndex]
    }
    func migrationUseCaseDidFinish(_ migrationUseCase: MigrationUseCase) {
        self.migrationUseCaseDidFinishCallCount += 1
        self.migrationUseCaseDidFinishArgs.append((migrationUseCase))
    }

    private(set) var migrationUseCaseDidUpdateProgressCallCount : Int = 0
    private var migrationUseCaseDidUpdateProgressArgs : Array<(MigrationUseCase, Double)> = []
    func migrationUseCaseDidUpdateProgressArgsForCall(_ callIndex: Int) -> (MigrationUseCase, Double) {
        return self.migrationUseCaseDidUpdateProgressArgs[callIndex]
    }
    func migrationUseCase(_ migrationUseCase: MigrationUseCase, didUpdateProgress progress: Double) {
        self.migrationUseCaseDidUpdateProgressCallCount += 1
        self.migrationUseCaseDidUpdateProgressArgs.append((migrationUseCase, progress))
    }

    static func reset() {
    }
}
