import rNews

// this file was generated by Xcode-Better-Refactor-Tools
// https://github.com/tjarratt/xcode-better-refactor-tools

class FakeMigrationUseCase : MigrationUseCase {
    init() {
    }

    private(set) var addSubscriberCallCount : Int = 0
    private var addSubscriberArgs : Array<(MigrationUseCaseSubscriber)> = []
    func addSubscriberArgsForCall(callIndex: Int) -> (MigrationUseCaseSubscriber) {
        return self.addSubscriberArgs[callIndex]
    }
    func addSubscriber(subscriber: MigrationUseCaseSubscriber) {
        self.addSubscriberCallCount++
        self.addSubscriberArgs.append((subscriber))
    }

    private(set) var beginMigrationCallCount : Int = 0
    func beginMigration() {
        self.beginMigrationCallCount++
    }

    static func reset() {
    }
}

class FakeMigrationUseCaseSubscriber : MigrationUseCaseSubscriber {
    init() {
    }

    private(set) var migrationUseCaseDidFinishCallCount : Int = 0
    private var migrationUseCaseDidFinishArgs : Array<(MigrationUseCase)> = []
    func migrationUseCaseDidFinishArgsForCall(callIndex: Int) -> (MigrationUseCase) {
        return self.migrationUseCaseDidFinishArgs[callIndex]
    }
    func migrationUseCaseDidFinish(migrationUseCase: MigrationUseCase) {
        self.migrationUseCaseDidFinishCallCount++
        self.migrationUseCaseDidFinishArgs.append((migrationUseCase))
    }

    static func reset() {
    }
}