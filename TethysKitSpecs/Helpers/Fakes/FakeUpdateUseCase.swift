@testable import TethysKit
import CBGPromise
import Result

// this file was generated by Xcode-Better-Refactor-Tools
// https://github.com/tjarratt/xcode-better-refactor-tools

final class FakeUpdateUseCase : UpdateUseCase, Equatable {
    private(set) var updateFeedsCallCount : Int = 0
    var updateFeedsStub : (([Feed]) -> Future<Result<Void, TethysError>>)?
    private var updateFeedsArgs: [[Feed]] = []
    func updateFeedsReturns(_ stubbedValues: (Future<Result<Void, TethysError>>)) {
        self.updateFeedsStub = {(feeds: [Feed]) -> (Future<Result<Void, TethysError>>) in
            return stubbedValues
        }
    }
    func updateFeedsArgsForCall(_ callIndex: Int) -> [Feed] {
        return self.updateFeedsArgs[callIndex]
    }
    func updateFeeds(_ feeds: [Feed]) -> (Future<Result<Void, TethysError>>) {
        self.updateFeedsCallCount += 1
        self.updateFeedsArgs.append(feeds)
        return self.updateFeedsStub!(feeds)
    }
}

func == (a: FakeUpdateUseCase, b: FakeUpdateUseCase) -> Bool {
    return a === b
}
